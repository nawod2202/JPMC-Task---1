From 9ce7b39aeed563c655254f8c49fcde551e1f81fe Mon Sep 17 00:00:00 2001
From: Nawod Sanjana <149600670+nawod2202@users.noreply.github.com>
Date: Sun, 10 Mar 2024 01:26:19 +0000
Subject: [PATCH] Last Commit

---
 JPMC - Starter Repo - Task 1/client3.py     | 13 ++++++++++---
 JPMC - Starter Repo - Task 1/client_test.py | 15 +++++++++++++++
 2 files changed, 25 insertions(+), 3 deletions(-)

diff --git a/JPMC - Starter Repo - Task 1/client3.py b/JPMC - Starter Repo - Task 1/client3.py
index 3fc09b7..398cf57 100644
--- a/JPMC - Starter Repo - Task 1/client3.py	
+++ b/JPMC - Starter Repo - Task 1/client3.py	
@@ -35,14 +35,17 @@ def getDataPoint(quote):
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price + ask_price)/2
     return stock, bid_price, ask_price, price
 
 
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
     """ ------------- Update this function ------------- """
-    return 1
+    if (price_b == 0):
+         return
+    return price_a/price_b
+
 
 
 # Main
@@ -52,8 +55,12 @@ if __name__ == "__main__":
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
         """ ----------- Update to get the ratio --------------- """
+        prices = {}
+
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] = price
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+    print("Ratio %s" % getRatio(prices["ABC"], prices["DEF"]))
+
diff --git a/JPMC - Starter Repo - Task 1/client_test.py b/JPMC - Starter Repo - Task 1/client_test.py
index af2bf26..de3a01d 100644
--- a/JPMC - Starter Repo - Task 1/client_test.py	
+++ b/JPMC - Starter Repo - Task 1/client_test.py	
@@ -18,8 +18,23 @@ class ClientTest(unittest.TestCase):
 
 
   """ ------------ Add more unit tests ------------ """
+  datapoint = getDataPoint(quotes)
+  self.assertEqual(datapoint, (119.2, 120.48, (119.2 + 120.48) / 2))
 
+def test_getDataPoint_emptyQuotes(self):
+        quotes = []
+        datapoint = getDataPoint(quotes)
+        self.assertIsNone(datapoint)
 
+def test_getDataPoint_singleQuote(self):
+        quotes = [
+            {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'}
+        ]
+        datapoint = getDataPoint(quotes)
+        self.assertEqual(datapoint, (121.2, 120.48, (121.2 + 120.48) / 2))
 
 if __name__ == '__main__':
     unittest.main()
+
+
+
-- 
2.44.0

